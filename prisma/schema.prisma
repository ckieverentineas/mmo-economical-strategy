// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  crdate   DateTime  @default(now())
  update    DateTime @default(now())
  Account  Account[]
}

model Account {
  id           Int            @id @default(autoincrement())
  name           String
  lvl            Int          @default(1)
  xp             Float        @default(0)
  gold           Float        @default(5000)
  iron           Float        @default(500)
  crystal        Int          @default(0)
  energy         Float        @default(1000)
  research       Float        @default(0)
  reputation     Float        @default(0)
  status         String       @default("player")
  crdate       DateTime       @default(now())
  update    DateTime @default(now())
  id_corporation Int          @default(0)
  id_user      Int            @unique
  user         User           @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Research       Research[]
  Statistics     Statistics[]
}

model System {
  id     Int      @id @default(autoincrement())
  name   String
  planet Float
  Planet Planet[]
}

model Planet {
  id   Int    @id @default(autoincrement())
  name String

  coal    Float
  gas     Float
  oil     Float
  uranium Float

  iron    Float
  golden  Float
  crystal Float

  area    Int   @default(128)
  artefact Float

  crdate    DateTime @default(now())
  update    DateTime @default(now())
  
  id_user   Int?
  id_system Int
  system    System   @relation(fields: [id_system], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Builder {
  id         Int      @id @default(autoincrement())
  name       String
  lvl        Int      @default(1)
  cost String?
  input String?
  storage String?
  output String?
  require String?
  id_planet  Int?
  id_user   Int?
  crdate     DateTime @default(now())
  update     DateTime @default(now())
}

model Worker {
  id         Int      @id @default(autoincrement())
  name       String
  lvl        Int      @default(1)
  xp         Float    @default(0)
  atk     Float    @default(1)
  def Float @default(2)
  hp Float @default(5)
  speed      Float    @default(1)
  salary     Float    @default(1)
  gold       Float    @default(0)
  reputation Float    @default(0)
  point      Int      @default(0)
  id_builder Int?
  id_planet  Int?
  id_user   Int?
  crdate     DateTime @default(now())
  update     DateTime @default(now())
}

model Corporation {
  id                  Int                   @id @default(autoincrement())
  id_user             Int
  name                String
  lvl                 Int                   @default(1)
  xp                  Float                 @default(0)
  gold                Float                 @default(1750)
  energy              Float                 @default(1750)
  reputation          Float                 @default(0)
  member              Int                   @default(6)
  crdate              DateTime              @default(now())
  update              DateTime              @default(now())
  Corporation_Builder Corporation_Builder[]
}
model Corporation_Builder {
  id             Int         @id @default(autoincrement())
  name           String
  lvl            Int         @default(1)
  type           String
  income         Float       @default(1)
  cost           Float       @default(100)
  worker         Int         @default(1)
  id_corporation Int
  crdate         DateTime    @default(now())
  update         DateTime    @default(now())
  corporation    Corporation @relation(fields: [id_corporation], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
model Research {
  id      Int      @id @default(autoincrement())
  name    String
  lvl     Int
  account    Account     @relation(fields: [id_account], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_account Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}

model Statistics {
  id      Int      @id @default(autoincrement())
  all     String
  day     String
  week    String
  month   String
  account    Account     @relation(fields: [id_account], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_account Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}
